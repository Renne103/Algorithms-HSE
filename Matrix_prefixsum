#include <iostream>
#include <vector>
#include <algorithm>

/* идея взята из https://brestprog.by/topics/prefixsums/ */

void sumTriangle(std::vector<std::vector<int64_t>> &v, int64_t n, int64_t m,
                 std::vector<std::vector<int64_t>> &pref) {
    pref[0][0] = v[0][0];
    for (int64_t i = 1; i < n; i++) {
        pref[i][0] = pref[i - 1][0] + v[i][0];
    }

    for (int64_t i = 1; i < m; i++) {
        pref[0][i] = pref[0][i - 1] + v[0][i];
    }

    for (int64_t i = 1; i < n; i++) {
        for (int64_t j = 1; j < m; j++) {
            pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + v[i][j];
        }
    }
}

void query(std::vector<std::vector<int64_t>> &c, std::vector<std::vector<int64_t>> &pref,
           int64_t q) {
    int64_t x1, x2, y1, y2;
    for (int i = 0; i < q; ++i) {
        x1 = c[i][0];
        x2 = c[i][2];
        y1 = c[i][1];
        y2 = c[i][3];
        if ((x1 == 0) && (y1 == 0)) {
            std::cout << pref[x2][y2] << "\n";
        } else if (x1 == 0) {
            std::cout << pref[x2][y2] - pref[x2][y1 - 1] << "\n";
        } else if (y1 == 0) {
            std::cout << pref[x2][y2] - pref[x1 - 1][y2] << "\n";
        } else if (x2 == 0) {
            std::cout << pref[x1 - 1][y1 - 1] - pref[x1 - 1][y2] << "\n";
        } else if (y2 == 0) {
            std::cout << -pref[x2][y1 - 1] + pref[x1 - 1][y1 - 1] << "\n";
        } else {
            std::cout << pref[x2][y2] - pref[x1 - 1][y2] - pref[x2][y1 - 1] + pref[x1 - 1][y1 - 1]
                      << "\n";
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t n, m, q;
    std::cin >> n >> m >> q;
    std::vector<std::vector<int64_t>> matrix(n, std::vector<int64_t>(m));
    std::vector<std::vector<int64_t>> pref(n, std::vector<int64_t>(m));  // вектор префиксных сумм
    for (int64_t i = 0; i < n; ++i) {
        for (int64_t j = 0; j < m; ++j) {
            std::cin >> matrix[i][j];
        }
    }
    std::vector<std::vector<int64_t>> coord(q, std::vector<int64_t>(4));
    for (int64_t i = 0; i < q; ++i) {
        for (int64_t j = 0; j < 4; ++j) {
            int64_t num;
            std::cin >> num;
            coord[i][j] = num - 1;
        }
    }
    sumTriangle(matrix, n, m, pref);
    query(coord, pref, q);
}
